#!/bin/bash

function ymc_install_package
{
  LC_ALL=C DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical \
    apt-get --yes --no-install-recommends install $@
  apt-get clean
}

function ymc_wait_for_partition_to_appear
{
  local partition_with_dev_to_wait_for=$1
  local loop_protection=30

  if [ -z "$partition_with_dev_to_wait_for" ]; then
    echo -n "WARNING: Can not wait for no blockdevice to appear...FAILED"
    sleep 5
    return 1
  fi

  echo -n "NOTICE: Waiting for '$partition_with_dev_to_wait_for' to appear..."

  while [ $loop_protection -gt 0 ]
  do
    if [ -b "$partition_with_dev_to_wait_for" ]; then
      echo "OKAY"
      sleep 1
      return 0
    else
      udevadm settle 1>/dev/null 2>/dev/null

      if [ -d "/sys/block/$(basename $partition_with_dev_to_wait_for)" ]; then
        drive_to_read_partition_table_from="/dev/$(basename $partition_with_dev_to_wait_for)"
      else
        drive_to_read_partition_table_from="/dev/$(basename $(dirname $(find /sys/block/*/ -maxdepth 1 -type d | grep -E -e $(basename $partition_with_dev_to_wait_for)'$' | head -n 1))) 2>/dev/null"
        if [ -z "$drive_to_read_partition_table_from" ]; then
          ### Assume to simply remove any number from the end to get the drive
          drive_to_read_partition_table_from=$(echo $drive_to_read_partition_table_from | sed -r 's/[0-9]+$//')
        fi
      fi

      if [ -b "$drive_to_read_partition_table_from" ]; then
        blockdev --rereadpt $drive_to_read_partition_table_from  1>/dev/null 2>/dev/null
      fi

      echo -n -e '\r'
      echo -n "NOTICE: Waiting for '$partition_with_dev_to_wait_for' to appear... [$loop_protection]  "
      sleep 1
      echo -n -e '\r'
      echo -n "                                                                               "
      echo -n -e '\r'
      echo -n "NOTICE: Waiting for '$partition_with_dev_to_wait_for' to appear..."

    fi

    loop_protection=$(expr $loop_protection - 1)
  done

  echo "FAILED"

  return 1
}

function ymc_minimal_clean_block_device
{
  local block_device_with_dev_to_clean=$1

  if [ ! -b "$block_device_with_dev_to_clean" ]; then
    echo "WARNING: Can not clean '$block_device_with_dev_to_clean', since it is not a block-device"
    return 1
  fi

  size_in_512_block=$(blockdev --getsz $block_device_with_dev_to_clean)
  if [ $? -ne 0 ]; then
    echo "WARNING: Can not clean '$block_device_with_dev_to_clean', since its size could not be retrieved"
    return 1
  fi

  size_in_512_block=$(echo $size_in_512_block | sed -r 's/[^0-9]//g')
  if [ -z "$size_in_512_block" ]; then
    echo "WARNING: Can not clean '$block_device_with_dev_to_clean', since its size is invalid"
    return 1
  fi

  if [ $(expr $size_in_512_block / 512) -le 16 ]; then
    echo -n "INFO: Cleaning full device '$block_device_with_dev_to_clean'..."
    dd if=/dev/zero of=$block_device_with_dev_to_clean oflag=direct bs=512 2>/dev/null 1>&2
    echo "DONE"
  else
    echo -n "INFO: Cleaning first 8M of '$block_device_with_dev_to_clean'..."
    dd if=/dev/zero of=$block_device_with_dev_to_clean oflag=direct bs=512 count=16 2>/dev/null 1>&2
    echo "DONE"

    echo -n "INFO: Cleaning last 8M of '$block_device_with_dev_to_clean'..."
    dd if=/dev/zero of=$block_device_with_dev_to_clean oflag=direct bs=512 seek=$(expr $size_in_512_block - 16) 2>/dev/null 1>&2
    echo "DONE"
  fi

  return 0
}


function ymc_purge_old_lvm_physical_volumes
{
  old_lvm_physical_volumes=$(pvscan --short 2>/dev/null | grep -E -e '[ \t]*/dev/')
  for old_lvm_physical_volume in $old_lvm_physical_volumes
  do
    ## Wipe out...
    if [ -b "$old_lvm_physical_volume" ]; then
      echo "Destroying LVM physical volume $old_lvm_physical_volume..."
      pvremove -ff -y $old_lvm_physical_volume
      if [ $? -eq 0 ]; then
        echo "DONE"
      else
        echo "FAILED"
      fi
    fi
  done
}

function ymc_stop_all_software_raids
{
  for raid_device in $(ls /dev/md*)
  do
    if [ -b "$raid_device" ]; then
      echo -e "Stopping sw-raid $raid_device..."
      mdadm $raid_device --fail detached --remove detached --stop
      if [ $? -eq 0 ]; then
        echo "DONE"
      else
        echo "FAILED"
      fi
    fi
  done
}

function ymc_prepare_chroot
{
  modprobe dm_mod
  modprobe raid1

  echo "INFO: Mounting /dev in chroot..."
  mount -o bind /dev $target_dir/dev/

  echo "INFO: Mounting /proc in chroot..."
  chroot $target_dir mount /proc

  echo "INFO: Mounting /sys in chroot..."
  chroot $target_dir mount /sys

  echo "INFO: Mounting /dev/pts in chroot..."
  chroot $target_dir mount devpts /dev/pts -t devpts

  ### Add the chroot-policy-flag
  echo '#!/bin/sh'> $target_dir/usr/sbin/policy-rc.d
  echo 'exit 101' >> $target_dir/usr/sbin/policy-rc.d
  chmod 755 $target_dir/usr/sbin/policy-rc.d
}

function ymc_unprepare_chroot
{
  ### Remove the chroot-policy-flag
  rm -f $target_dir/usr/sbin/policy-rc.d

  echo "INFO: Stopping services in chroot..."
  chroot $target_dir /etc/init.d/avahi-daemon stop
  chroot $target_dir /etc/init.d/dbus stop
  chroot $target_dir /etc/init.d/ntp stop
  pids_to_kill=$(lsof $target_dir 2>/dev/null | cut -d ' ' -f 2 | sort | uniq | grep -v -E -e '^[ ]*$')
  for pid_to_kill in $pids_to_kill
  do
    chroot /mnt/install/root kill $pid_to_kill 2>/dev/null
    chroot /mnt/install/root kill -9 $pid_to_kill 2>/dev/null
    kill $pid_to_kill 2>/dev/null
    kill -9 $pid_to_kill 2>/dev/null
  done

  echo "INFO: Unmounting /boot in chroot..."
  chroot_exec umount /boot

  echo "INFO: Unmounting /dev/pts in chroot..."
  chroot $target_dir umount /dev/pts

  echo "INFO: Unmounting /sys in chroot..."
  chroot $target_dir umount /sys

  echo "INFO: Unmounting /proc in chroot..."
  chroot $target_dir umount /proc

  echo "INFO: Unmounting /dev in chroot..."
  umount $target_dir/dev

  echo "INFO: Unmounting chroot..."
  umount $target_dir
}

function chroot_exec
{
  LC_ALL=C DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical chroot $target_dir $@
  exit_code=$?
  return $exit_code
}

function ymc_wait_for_boot_device_to_be_synced
{
  ### Stop SW-Raids
  echo "INFO: Stopping all created SW-Raids"
  mdadm --stop --scan

  ### Start Boot-Raid in order to rebuild it
  echo "INFO: Starting SW-Raid used for the boot-partition..."
  mdadm --assemble --run /dev/md0 $boot_partitions

  ### Wait for the Boot-Raid to be synced...
  echo "INFO: Waiting for the SW-Raid used for the boot-partition to be synced..."
  min_runs=0
  while [ $min_runs -lt 10 ]
  do
    status=$(cat /proc/mdstat  | grep resync)
    if [ "$status" != '' ]; then
      echo -n $status
      echo -n -e '\r'
    else
      min_runs=$(expr $min_runs + 1)
      echo -n "Please wait...   ["$(expr 10 - $min_runs)"]"
      echo -n "                                                            "
      echo -n -e '\r'
    fi
    sleep 1
  done
  echo "INFO: SW-Raid used for the boot-partition is now in sync"

  if [ $srf_installer_noreboot -eq 1 ]; then
    ### Start any other SW-Raid-Device if option '--noreboot' has been given
    echo "INFO: Starting all SW-Raid-Devices"
    mdadm --assemble --run --scan --config=partitions
  fi
}

function ymc_get_harddrives
{
  return_code=1

  min_clean=$(cat /proc/partitions 2>/dev/null | sed -r 's/^[0-9 ]+ //' | grep -v -E -e '(major minor)|(^[ ]*$|^dm-[0-9]+)|(^md[0-9]+)')
  block_devices=$(ls /sys/block/ | sed -r 's|cciss!c|cciss/c|g' | grep -v -E -e '^(loop|fd|sr)')
  for possible_disk in $min_clean
  do
    if [ $(ymc_contains $possible_disk $block_devices) -eq 1 ]; then
      return_code=0
      echo $possible_disk
    fi
  done
  return $return_code
}

function ymc_get_partition_for_drive_by_num
{
  whished_drive=$1
  partition_number=$2
  return_code=1
  min_clean=$(cat /proc/partitions 2>/dev/null | sed -r 's/^[0-9 ]+ //' | grep -v -E -e '(major minor)|(^[ ]*$|^dm-[0-9]+)|(^md[0-9]+)' | grep -E -e "^$whished_drive")
  counter=0
  for partitions_infos in $min_clean
  do
    if [ "$counter" == "$partition_number" ]; then
      return_code=0
      echo $partitions_infos
    fi
    counter=$(expr $counter + 1)
  done
  return $return_code
}

function ymc_contains
{
  ymc_contains_org_IFS=$IFS
  IFS=' '
  needle=$1
  items=$*
  first_done=0
  for item in $items
  do
    if [ $first_done -eq 0 ]; then
      first_done=1
      continue
    fi
    if [ "$item" == "$needle" ]; then
      echo 1
      IFS=$ymc_contains_org_IFS
      return 0
    fi
  done
  echo 0
  IFS=$ymc_contains_org_IFS
  return 1
}